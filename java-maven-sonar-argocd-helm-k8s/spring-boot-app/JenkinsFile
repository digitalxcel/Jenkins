pipeline {
  agent {
    docker {
      image 'abdallahs5/maven-abdallah-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      registryUrl 'https://registry.hub.docker.com' // Ajout explicite du registre
      registryCredentialsId 'dockerhub-creds'      // Credentials mis à jour
    }
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout([ // Décommente et améliore le checkout
          $class: 'GitSCM',
          branches: [[name: 'main']],
          userRemoteConfigs: [[
            url: 'https://github.com/digitalxcel/Jenkins.git',
            credentialsId: 'github' // Utilise les credentials GitHub
          ]]
        ])
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package -DskipTests
        '''
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.38.63.103:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abdallahs5/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          
          docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-creds') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO = "digitalxcel/Jenkins"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests
            sed -i "s|replaceImageTag|${BUILD_NUMBER}|g" deployment.yml
            
            git config --global user.email "laye95seck@gmail.com"
            git config --global user.name "Jenkins CI"
            
            git add deployment.yml
            git commit -m "Update image to version ${BUILD_NUMBER}"
            git push "https://${GITHUB_TOKEN}@github.com/${GIT_REPO}.git" HEAD:main
          '''
        }
      }
    }
  }
  
  post {
    failure {
      slackSend(channel: '#cicd-alerts', message: "Build failed: ${BUILD_URL}")
    }
    always {
      cleanWs()
    }
  }
}
